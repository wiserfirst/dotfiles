set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
set hlsearch
nmap <leader>cs :let @/ = ""<CR>

" count match of last search pattern
nnoremap <leader>n :%s///gn<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  set background=dark
  set guifont=Monaco:h12
  set lines=999 columns=999
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme elflord
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" Custom configuration

set hidden

" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd! bufwritepost .vimrc.local source ~/.vimrc.local
" for edit/source vimrc
map <leader>re :execute "edit " . $MYVIMRC<CR>
map <leader>rs :execute "source " . $MYVIMRC<CR>

" TAB setting{
   set expandtab        "replace <TAB> with spaces

   au FileType Makefile set noexpandtab
   autocmd FileType php set tabstop=4
   autocmd FileType php set softtabstop=4
   autocmd FileType php set shiftwidth=4
"}

" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

nnoremap j gj
nnoremap k gk

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" for Elixir and OTP source
let g:alchemist#elixir_erlang_src = "$HOME/work/open-source"

" make test commands execute using iterm
let test#strategy = "iterm"

" Help File speedups, <enter> to follow tag, delete for back
au filetype help nnoremap <buffer><cr> <c-]>
au filetype help nnoremap <buffer><bs> <c-T>
au filetype help nnoremap <buffer>q :q<CR>
au filetype help set nonumber
set splitbelow " Split windows, ie Help, make more sense to me below
au filetype help wincmd _ " Maximze the help on open

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" show hidden files in NERDTree (capital I to toggle)
let NERDTreeShowHidden=1

" Use one space, not two, after punctuation.
set nojoinspaces

" Display relative line numbers, with absolute line number for current line
set number
set numberwidth=5
set relativenumber

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

let g:fzf_mru_relative = 1

let g:fzf_files_options = '--reverse --preview "head -'.&lines.' {}"'

let g:ale_linters = {
\   'elixir': ['elixir-ls'],
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'elixir': ['mix_format'],
\   'javascript': ['eslint'],
\   'rust': ['rustfmt'],
\}

let g:ale_elixir_elixir_ls_release='~/work/open-source/elixir-ls/release'
let g:ale_completion_enabled = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
let g:ale_linters_explicit = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
noremap <Leader>ad :ALEGoToDefinition<CR>
nnoremap <leader>af :ALEFix<cr>
noremap <Leader>ar :ALEFindReferences<CR>
"Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

nnoremap <leader>k :Ack! '\b<c-r>=expand("<cWORD>")<cr>\b'<CR>
nnoremap <leader>sa vip:sort<CR>:w<CR>

let g:user_emmet_install_global = 0
autocmd FileType html,css,javascript,jsx,typescript.tsx EmmetInstall
let g:user_emmet_settings = {
\  'javascript' : {
\      'extends' : 'jsx',
\  },
\}

let g:elm_format_autosave = 1
